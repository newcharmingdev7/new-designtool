//
// FORM > TOGGLE
//
// properties within each class are sorted alphabetically
//


// "BASE" CONTROL

.hds-form-toggle {
  display: inline-block; // we emulate the behaviour of a checkbox/radiobutton control
  isolation: isolate; // used to create a new stacking context
  position: relative;
}

// control (hidden)

.hds-form-toggle__control {
  appearance: none;
  background-color: transparent;
  border: none;
  bottom: 0;
  color: transparent;
  cursor: pointer;
  display: block;
  height: 100%;
  left: 0;
  margin: 0;
  opacity: 0;
  outline: none;
  padding: 0;
  position: absolute;
  right: 0;
  top: 0;
  z-index: 1;

  &:disabled {
    cursor: not-allowed;
  }
}

// facade (visible)

.hds-form-toggle__facade {
  background-image: var(--token-form-toggle-background-image-data-url);
  background-repeat: no-repeat;
  background-position: var(--token-form-toggle-background-image-position-x) 50%;
  background-size: var(--token-form-toggle-background-image-size) var(--token-form-toggle-background-image-size);
  border-radius: calc(var(--token-form-toggle-height) / 2);
  // notice: we want to share the border color between the "thumb" and the "track" so we use a local CSS prop for this
  border: var(--token-form-radio-border-width) solid var(--border-color);
  display: block;
  height: var(--token-form-toggle-height);
  position: relative;
  width: var(--token-form-toggle-width);

  @media (prefers-reduced-motion: no-preference) {
    transition-property: all;
    transition-duration: var(--token-form-toggle-transition-duration);
    transition-timing-function: var(--token-form-toggle-transition-timing-function);
  }

  // used for the "thumb"

  &::after {
    background-color: var(--token-form-control-base-surface-color-default);
    border-radius: 50%;
    border: var(--token-form-radio-border-width) solid var(--border-color);
    width: var(--token-form-toggle-thumb-size);
    height: var(--token-form-toggle-thumb-size);
    content: '';
    left: calc(var(--token-form-radio-border-width) * -1);
    position: absolute;
    transform: translate3d(0, 0, 0);
    top: calc(var(--token-form-radio-border-width) * -1);

    @media (prefers-reduced-motion: no-preference) {
      transition-property: all;
      transition-duration: var(--token-form-toggle-transition-duration);
      transition-timing-function: var(--token-form-toggle-transition-timing-function);
    }
  }

  // used for the focus

  &::before {
    // notice: to avoid too many nested calc() operation, we have decided to compute directly the values in Sass
    $outline-width: 3px;
    $outline-offset: 1px;
    $shift: $outline-width + $outline-offset + 1px; // here 1px refers to "--token-form-radio-border-width"
    border-radius: calc(var(--token-form-toggle-height) / 2 + $outline-width + $outline-offset);
    border-width: $outline-width;
    bottom: -$shift;
    content: "";
    left: -$shift;
    margin: auto;
    position: absolute;
    right: -$shift;
    top: -$shift;
  }

  // STATUS

  // base (default)

  :not(:checked) + & {
    --border-color: var(--token-form-control-base-border-color-default);
    background-color: var(--token-form-toggle-base-surface-color-default); // this is specific for "toggle", is not like the other controls!
  }
  :checked + & {
    --border-color: var(--token-form-control-checked-border-color-default);
    background-color: var(--token-form-control-checked-surface-color-default);

    &::after {
      $translation: calc(var(--token-form-toggle-width) - var(--token-form-toggle-thumb-size));
      transform: translate3d($translation, 0, 0);
    }
  }

  // hover

  :hover:not(:checked) + &,
  .mock-hover:not(:checked) + & {
    --border-color: var(--token-form-control-base-border-color-hover);
  }
  :hover:checked + &,
  .mock-hover:checked + & {
    --border-color: var(--token-form-control-checked-border-color-hover);
    background-color: var(--token-form-control-checked-border-color-default);
  }

  // focus (same for all the states)

  :focus + &,
  .mock-focus + & {
    &::before {
      border-style: solid;
      border-color: var(--token-color-focus-action-external);
    }
  }

  // DISABLED

  :disabled:not(:checked) + &,
  :disabled:checked + & {
    --border-color: var(--token-form-control-disabled-border-color);
    background-color: var(--token-form-control-disabled-surface-color);
    background-image: var(--token-form-toggle-background-image-data-url-disabled);
  }
}
