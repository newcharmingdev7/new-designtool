{{page-title "Table Component"}}
<h2 class="dummy-h2">
  Table
</h2>
<section>
  <h3 class="dummy-h3" id="overview">
    <a href="#overview" class="dummy-link-section" aria-labelledby="overview">ยง</a>
    Overview
  </h3>
  <p class="dummy-paragraph">
    The
    <code class="dummy-code">Hds::Table</code>
    component should be used for displaying tabular data; it renders a
    <a
      href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table"
      target="_blank"
      rel="noopener noreferrer"
    >HTML table element</a>.
  </p>
  <p class="dummy-paragraph">Use a table when you need to display a large amount of data in a structured way. Tables are
    useful for displaying information that is easy to compare and analyze.</p>
</section>
<section>
  <h3 class="dummy-h3" id="component-api">
    <a href="#component-api" class="dummy-link-section">ยง</a>
    Component API
  </h3>
  <p class="dummy-paragraph" id="component-api-table">
    The
    <code class="dummy-code">Table</code>
    component itself is where most of options will be applied. Use of the component API (below) will automatically
    render sortable columns. When the
    <code class="dummy-code">@columns</code>
    property is invoked with a value.
  </p>
  <p class="dummy-paragraph">
    Additionally, there are child components that can also be used to provide custom options.
    <ul>
      <li class="dummy-paragraph">
        The
        <code class="dummy-code">Hds::Table::Tr</code>
        component is a template-only component. It supports
        <code class="dummy-code">...attributes</code>
        but is not eligible to receive interactions. It can contain
        <code class="dummy-code">Hds::Table::Th</code>
        or
        <code class="dummy-code">Hds::Table::Td</code>
        components.
      </li>
      <li class="dummy-paragraph">
        The
        <code class="dummy-code">Hds::Table::Th</code>
        component is a template-only component. It supports
        <code class="dummy-code">...attributes</code>
        but is not eligible to receive interactions itself, although it can contain interactive elements. However, it is
        not likely that you will need to add interactive elements to this component as the sorting is already otherwise
        provided for.
      </li>
      <li class="dummy-paragraph">
        The
        <code class="dummy-code">Hds::Table::Td</code>
        component is a template-only component. It supports
        <code class="dummy-code">...attributes</code>
        but is not eligible to receive interactions itself; however it can contain interactive elements.
      </li>
    </ul>
  </p>
  <dl class="dummy-component-props" aria-labelledby="component-api-table">
    <dt>&lt;:head&gt; <code>named block</code></dt>
    <dd>
      <p>This is a named block where the content for the thead is rendered.</p>
    </dd>
    <dt>&lt;:body&gt; <code>named block</code></dt>
    <dd>
      <p>This is where the table body (tbody) is rendered.</p>
    </dd>
    <dt>model <code>array</code></dt>
    <dd><p>If defined, sets the data source that gets yielded by the
        <code class="dummy-code">:body</code>
        named block.</p></dd>
    <dt>columns <code>array</code></dt>
    <dd><p>If defined, sets the column header content and indicates that the table should be sorted.</p></dd>
    <dt>sortingKeys <code>array</code></dt>
    <dd><p>If defined, indicates which columns should be sortable (if only
        <code class="dummy-code">columns</code>
        is defined, all columns will be sortable).</p></dd>
    <dt>sortBy <code>string</code></dt>
    <dd><p>If defined, indicates which column should be pre-sorted when the table is rendered.</p></dd>
    <dt>sortOrder <code>string</code></dt>
    <dd>
      <p>If defined, indicates which direction the column should be pre-sorted in. All columns are unsorted by default.</p>
      <p>Acceptable values:</p>
      <ol>
        <li>asc</li>
        <li>desc</li>
      </ol>
    </dd>
    <dt>isStriped <code>boolean</code></dt>
    <dd>
      <p>Default: <span class="default">true</span></p>
      <p>If set to <code class="dummy-code">false</code>, zebra striping on the table will not be applied.</p>
    </dd>
    <dt>density <code>enum</code></dt>
    <dd>
      <p>If set, determines the density, or height, of the row.</p>
      <p>Acceptable values:</p>
      <ol>
        <li>short</li>
        <li class="default">medium</li>
        <li>tall</li>
      </ol>
    </dd>
    <dt>caption <code>string</code></dt>
    <dd><p>Adds a (non-visible) caption for users with assistive technology. If set on a sortable table, the provided
        table caption is paired with the automatically generated sorted message text.</p></dd>
    <dt>...attributes</dt>
    <dd><p>Supported for the <code class="dummy-code">Hds::Table</code> component.</p></dd>
  </dl>
</section>
<section>
  <h3 class="dummy-h3" id="how-to-use"><a href="#how-to-use" class="dummy-link-section">ยง</a> How to use</h3>
  <p class="dummy-paragraph">There are several ways to customize the table component.</p>
  <h4 class="dummy-h4">Simple Table</h4>
  <p class="dummy-paragraph">In the simplest invocation of the table component, you would define the model and insert
    your own content into the
    <code class="dummy-code">:head</code>
    and
    <code class="dummy-code">:body</code>
    blocks. Here is an example of such an invocation in a template:</p>
  {{! prettier-ignore-start }}
  {{! template-lint-disable no-unbalanced-curlies }}
  <CodeBlock
    @language="handlebars"
    @code="<!-- app/templates/components/table.hbs -->

<Hds::Table @model=\{{this.model}}>
  <:head>
    <Hds::Table::Tr>
      <Hds::Table::Th>Artist</Hds::Table::Th>
      <Hds::Table::Th>Album</Hds::Table::Th>
      <Hds::Table::Th>Release Year</Hds::Table::Th>
    </Hds::Table::Tr>
  </:head>
  <:body as |data|>
    <Hds::Table::Tr>
      <td>\{{data.artist}}</td>
      <td>\{{data.album}}</td>
      <td>\{{data.year}}</td>
    </Hds::Table::Tr>
  </:body>
</Hds::Table>"
  />
  {{! template-lint-enable no-unbalanced-curlies }}
  {{! prettier-ignore-end }}
  <p class="dummy-paragraph">For documentation purposes, we imitated fetching data from an API and working with that as
    our data model.</p>
  {{! prettier-ignore-start }}
  {{! template-lint-disable no-unbalanced-curlies }}
  <CodeBlock
    @language="javascript"
    @code="import Route from '@ember/routing/route';

export default class ComponentsTableRoute extends Route {
  async model() {
    let response = await fetch('/api/folk.json');
    let { data } = await response.json();

    return data.map((model) => {
      let { attributes } = model;
      return { ...attributes };
    });
  }
}"
  />
  {{! template-lint-enable no-unbalanced-curlies }}
  {{! prettier-ignore-end }}
  <h4 class="dummy-h4">Sortable Table</h4>
  <p class="dummy-paragraph">For the sortable table, the invocation and use is a little bit different:</p>
  {{! template-lint-enable no-unbalanced-curlies }}
  {{! prettier-ignore-end }}
  <p class="dummy-paragraph">1. Shape the data model for use; in this example we've placed it in the page's route. In
    this example, we're identifying the column headers and also capitalizing them.</p>
  {{! prettier-ignore-start }}
  {{! template-lint-disable no-unbalanced-curlies }}
  <CodeBlock
    @language="javascript"
    @code="// app/routes/components/table.js

import Route from '@ember/routing/route';
import { capitalize } from '@ember/string';

export default class ComponentsTableRoute extends Route {
  async model() {
    let response = await fetch('/api/folk.json');
    let { data } = await response.json();

    // make sure the variable is declared outside of the loop
    // so we can return it in the model response
    let columns;
    let dataResponse = data.map((model) => {
      let { id, attributes } = model;
      columns = Object.keys(attributes);
      return { id, ...attributes };
    });
    columns = columns.map((column) => {
      return { key: column, label: capitalize(column) };
    });
    return { data: dataResponse, columns };
  }
}"
  />
  {{! template-lint-enable no-unbalanced-curlies }}
  {{! prettier-ignore-end }}
  <p class="dummy-paragraph">2. Invoke the
    <span class="dummy-code">Hds::Table</span>
    component in your template file.</p>
  {{! prettier-ignore-start }}
  {{! template-lint-disable no-unbalanced-curlies }}
  <CodeBlock
    @language="handlebars"
    @code="<!-- app/templates/components/table.hbs -->

<Hds::Table
  @model=\{{this.model.data}}
  @columns=\{{this.model.columns}}
>
  <:body as |data|>
    <Hds::Table::Tr>
      <td>\{{data.artist}}</td>
      <td>\{{data.album}}</td>
      <td>\{{data.year}}</td>
    </Hds::Table::Tr>
  </:body>
</Hds::Table>"
  />
  {{! template-lint-enable no-unbalanced-curlies }}
  {{! prettier-ignore-end }}
  <p class="dummy-paragraph">If you want, you can indicate that only specific columns should be sortable.</p>
  {{! prettier-ignore-start }}
  {{! template-lint-disable no-unbalanced-curlies }}
  <CodeBlock
    @language="handlebars"
    @code="<!-- app/templates/components/table.hbs -->

<Hds::Table
  @model=\{{this.model.data}}
  @columns=\{{this.model.columns}}
  @sortingKeys=\{{array 'artist' 'album'}}
>
  <:body as |data|>
    <Hds::Table::Tr>
      <td>\{{data.artist}}</td>
      <td>\{{data.album}}</td>
      <td>\{{data.year}}</td>
    </Hds::Table::Tr>
  </:body>
</Hds::Table>"
  />
  {{! template-lint-enable no-unbalanced-curlies }}
  {{! prettier-ignore-end }}
  <p class="dummy-paragraph">You can also indicate that a specific column should be pre-sorted.</p>
  {{! prettier-ignore-start }}
  {{! template-lint-disable no-unbalanced-curlies }}
  <CodeBlock
    @language="handlebars"
    @code="<!-- app/templates/components/table.hbs -->

<Hds::Table
  @model=\{{this.model.data}}
  @columns=\{{this.model.columns}}
  @sortingKeys=\{{array 'artist' 'album'}}
  @sortBy='artist'
>
  <:body as |data|>
    <Hds::Table::Tr>
      <td>\{{data.artist}}</td>
      <td>\{{data.album}}</td>
      <td>\{{data.year}}</td>
    </Hds::Table::Tr>
  </:body>
</Hds::Table>"
  />
  {{! template-lint-enable no-unbalanced-curlies }}
  {{! prettier-ignore-end }}
  <p class="dummy-paragraph">You can also indicate that a specific column should be pre-sorted in a specific direction.</p>
  {{! prettier-ignore-start }}
  {{! template-lint-disable no-unbalanced-curlies }}
  <CodeBlock
    @language="handlebars"
    @code="<!-- app/templates/components/table.hbs -->

<Hds::Table
  @model=\{{this.model.data}}
  @columns=\{{this.model.columns}}
  @sortingKeys=\{{array 'artist' 'album'}}
  @sortBy='artist'
  @sortOrder='desc'
>
  <:body as |data|>
    <Hds::Table::Tr>
      <td>\{{data.artist}}</td>
      <td>\{{data.album}}</td>
      <td>\{{data.year}}</td>
    </Hds::Table::Tr>
  </:body>
</Hds::Table>"
  />
  {{! template-lint-enable no-unbalanced-curlies }}
  {{! prettier-ignore-end }}

</section>
<section>
  <h3 class="dummy-h3" id="design-guidelines">
    <a href="#design-guidelines" class="dummy-link-section">ยง</a>
    Design guidelines
  </h3>
  <div class="dummy-design-guidelines">
    <p class="dummy-paragraph">
      <a
        href="https://www.figma.com/file/noyY6dUMDYjmySpHcMjhkN/HDS-Product---Components?node-id=16727%3A59704"
        target="_blank"
        rel="noopener noreferrer"
      >Figma UI Kit</a>
    </p>
  </div>
  <details>
    <summary>Table header design guidelines (expand to view)</summary>
    <div class="dummy-design-guidelines">
      <p class="dummy-paragraph">
        <img
          class="dummy-figma-docs"
          src="/assets/images/table-header-design_guidelines.png"
          alt="table header design guidelines as a screenshot. please visit the figma file link."
        />
      </p>
    </div>
  </details>
  <details>
    <summary>Table cell design guidelines (expand to view)</summary>
    <div class="dummy-design-guidelines">
      <p class="dummy-paragraph">
        <img
          class="dummy-figma-docs"
          src="/assets/images/table-cell-design_guidelines.png"
          alt="table cell design guidelines as a screenshot. please visit the figma file link."
        />
      </p>
    </div>
  </details>

</section>
<section>
  <h3 class="dummy-h3" id="accessibility">
    <a href="#accessibility" class="dummy-link-section">ยง</a>
    Accessibility
  </h3>
  <p class="dummy-paragraph">This component has been designed and implemented with accessibility in mind. When used as
    recommended, there should not be any WCAG conformance issues with this component. Developers should ensure that any
    table customizations they implement also meet the applicable WCAG Success Criteria.
  </p>
  <p class="dummy-paragraph">There are a few critical items for developers to note:
    <ul>
      <li>The table row element (<code class="dummy-code">tr</code>) is not eligible to receive interactions. If an
        interactive element is desired, place it within a table cell element (<code class="dummy-code">td</code>).</li>
      <li>When providing additional or alternative styles to the table element, do not change the
        <code class="dummy-code">display</code>
        property in the CSS. This alters how the table is presented to the user with assistive technology, and they will
        no longer be presented with a table.
      </li>
    </ul>
  </p>
  <h4 class="dummy-h4">
    Applicable WCAG Success Criteria (Reference)
  </h4>
  <p class="dummy-paragraph">
    This section is for reference only. This component intends to conform to the following WCAG success criteria:
  </p>
  <ul class="dummy-list">
    <li>1.3.1:
      <a
        href="https://www.w3.org/WAI/WCAG21/Understanding/info-and-relationships.html"
        rel="noopener noreferrer"
        target="_blank"
      >Info and Relationships (A)</a>: Information, structure, and relationships conveyed through presentation can be
      programmatically determined or are available in text.</li>
    <li>1.3.2
      <a
        href="https://www.w3.org/WAI/WCAG21/Understanding/meaningful-sequence.html"
        rel="noopener noreferrer"
        target="_blank"
      >Meaningful Sequence (A)</a>: When the sequence in which content is presented affects its meaning, a correct
      reading sequence can be programmatically determined.</li>
    <li>1.4.1
      <a
        href="https://www.w3.org/WAI/WCAG21/Understanding/use-of-color.html"
        rel="noopener noreferrer"
        target="_blank"
      >Use of Color (A)</a>: Color is not used as the only visual means of conveying information, indicating an action,
      prompting a response, or distinguishing a visual element.</li>
    <li>1.4.3
      <a href="https://www.w3.org/WAI/WCAG21/Understanding/xxx.html" rel="noopener noreferrer" target="_blank">Contrast
        (Minimum) (AA)</a>: The visual presentation of text and images of text has a contrast ratio of at least 4.5:1</li>
    <li>1.4.4
      <a
        href="https://www.w3.org/WAI/WCAG21/Understanding/resize-text.html"
        rel="noopener noreferrer"
        target="_blank"
      >Resize text (AA)</a>: Except for captions and images of text, text can be resized without assistive technology up
      to 200 percent without loss of content or functionality.</li>
    <li>1.4.10
      <a href="https://www.w3.org/WAI/WCAG21/Understanding/reflow.html" rel="noopener noreferrer" target="_blank">Reflow
        (AA)</a>: Content can be presented without loss of information or functionality, and without requiring scrolling
      in two dimensions (some exceptions apply)</li>
    <li>1.4.11
      <a
        href="https://www.w3.org/WAI/WCAG21/Understanding/non-text-contrast.html"
        rel="noopener noreferrer"
        target="_blank"
      >Non-text Contrast (AA)</a>: The visual presentation of the following have a contrast ratio of at least 3:1
      against adjacent color(s): user interface components; graphical objects.</li>
    <li>1.4.12
      <a
        href="https://www.w3.org/WAI/WCAG21/Understanding/text-spacing.html"
        rel="noopener noreferrer"
        target="_blank"
      >Text Spacing (AA)</a>: no loss of content or functionality occurs by setting all of the following and by changing
      no other style property: line height set to 1.5; spacing following paragraphs set to at least 2x the font size;
      letter-spacing set at least 0.12x of the font size, word spacing set to at least 0.16 times the font size.</li>
    <li>1.4.13
      <a
        href="https://www.w3.org/WAI/WCAG21/Understanding/content-on-hover-or-focus.html"
        rel="noopener noreferrer"
        target="_blank"
      >Content on Hover or Focus (AA)</a>: Where receiving and then removing pointer hover or keyboard focus triggers
      additional content to become visible and then hidden, the following are true: dismissible, hoverable, persistent
      (see link)</li>
    <li>2.1.1
      <a
        href="https://www.w3.org/WAI/WCAG21/Understanding/keyboard.html"
        rel="noopener noreferrer"
        target="_blank"
      >Keyboard (A)</a>: All functionality of the content is operable through a keyboard interface.</li>
    <li>2.1.2
      <a
        href="https://www.w3.org/WAI/WCAG21/Understanding/no-keyboard-trap.html"
        rel="noopener noreferrer"
        target="_blank"
      >No Keyboard Trap (A)</a>: If keyboard focus can be moved to a component of the page using a keyboard interface,
      then focus can be moved away from that component using only a keyboard interface.
    </li>
    <li>2.1.4
      <a
        href="https://www.w3.org/WAI/WCAG21/Understanding/character-key-shortcuts.html"
        rel="noopener noreferrer"
        target="_blank"
      >Character Key Shortcuts (A)</a>: If a keyboard shortcut is implemented in content using only letter (including
      upper- and lower-case letters), punctuation, number, or symbol characters, then it should be able to be turned
      off, remapped, or active only on focus.
    </li>
    <li>2.4.3
      <a
        href="https://www.w3.org/WAI/WCAG21/Understanding/focus-order.html"
        rel="noopener noreferrer"
        target="_blank"
      >Focus Order (A)</a>: If a Web page can be navigated sequentially and the navigation sequences affect meaning or
      operation, focusable components receive focus in an order that preserves meaning and operability.</li>
    <li>2.4.7
      <a
        href="https://www.w3.org/WAI/WCAG21/Understanding/focus-visible.html"
        rel="noopener noreferrer"
        target="_blank"
      >Focus Visible (AA)</a>: Any keyboard operable user interface has a mode of operation where the keyboard focus
      indicator is visible.</li>
    <li>4.1.1
      <a
        href="https://www.w3.org/WAI/WCAG21/Understanding/parsing.html"
        rel="noopener noreferrer"
        target="_blank"
      >Parsing (A)</a>: In content implemented using markup languages, elements have complete start and end tags,
      elements are nested according to their specifications, elements do not contain duplicate attributes, and any IDs
      are unique.</li>
    <li>4.1.2
      <a
        href="https://www.w3.org/WAI/WCAG21/Understanding/name-role-value.html"
        rel="noopener noreferrer"
        target="_blank"
      >Name, Role, Value (A)</a>: For all user interface components, the name and role can be programmatically
      determined; states, properties, and values that can be set by the user can be programmatically set; and
      notification of changes to these items is available to user agents, including assistive technologies</li>
  </ul>
</section>
<section data-test-percy>
  <h3 class="dummy-h3" id="showcase">
    <a href="#showcase" class="dummy-link-section">ยง</a>
    Showcase
  </h3>
  <h4 class="dummy-h4">
    Static table with model defined
  </h4>
  <Hds::Table @model={{this.model.data}}>
    <:head>
      <Hds::Table::Tr>
        <Hds::Table::Th>Artist</Hds::Table::Th>
        <Hds::Table::Th>Album</Hds::Table::Th>
        <Hds::Table::Th>Release Year</Hds::Table::Th>
      </Hds::Table::Tr>
    </:head>
    <:body as |data|>
      <Hds::Table::Tr>
        <td>{{data.artist}}</td>
        <td>{{data.album}}</td>
        <td>{{data.year}}</td>
      </Hds::Table::Tr>
    </:body>
  </Hds::Table>
  <h4 class="dummy-h4">
    Static table with density set to "short"
  </h4>
  <Hds::Table @model={{this.model.data}} @density="short">
    <:head>
      <Hds::Table::Tr>
        <Hds::Table::Th>Artist</Hds::Table::Th>
        <Hds::Table::Th>Album</Hds::Table::Th>
        <Hds::Table::Th>Release Year</Hds::Table::Th>
      </Hds::Table::Tr>
    </:head>
    <:body as |data|>
      <Hds::Table::Tr>
        <td>{{data.artist}}</td>
        <td>{{data.album}}</td>
        <td>{{data.year}}</td>
      </Hds::Table::Tr>
    </:body>
  </Hds::Table>
  <h4 class="dummy-h4">
    Static table with density set to "tall"
  </h4>
  <Hds::Table @model={{this.model.data}} @density="tall">
    <:head>
      <Hds::Table::Tr>
        <Hds::Table::Th>Artist</Hds::Table::Th>
        <Hds::Table::Th>Album</Hds::Table::Th>
        <Hds::Table::Th>Release Year</Hds::Table::Th>
      </Hds::Table::Tr>
    </:head>
    <:body as |data|>
      <Hds::Table::Tr>
        <td>{{data.artist}}</td>
        <td>{{data.album}}</td>
        <td>{{data.year}}</td>
      </Hds::Table::Tr>
    </:body>
  </Hds::Table>
  <h4 class="dummy-h4">
    Static table with no model defined
  </h4>
  <Hds::Table>
    <:head>
      <Hds::Table::Tr>
        <Hds::Table::Th>Cell Header</Hds::Table::Th>
        <Hds::Table::Th>Cell Header</Hds::Table::Th>
        <Hds::Table::Th>Cell Header</Hds::Table::Th>
      </Hds::Table::Tr>
    </:head>
    <:body>
      <Hds::Table::Tr>
        <td>Cell Content</td>
        <td>Cell Content</td>
        <td>Cell Content</td>
      </Hds::Table::Tr>
      <Hds::Table::Tr>
        <td>Cell Content</td>
        <td>Cell Content</td>
        <td>Cell Content</td>
      </Hds::Table::Tr>
      <Hds::Table::Tr>
        <td>Cell Content</td>
        <td>Cell Content</td>
        <td>Cell Content</td>
      </Hds::Table::Tr>
    </:body>
  </Hds::Table>
  <h4 class="dummy-h4">
    Static table with no striping
  </h4>
  <Hds::Table @model={{this.model.data}} @isStriped={{false}}>
    <:head>
      <Hds::Table::Tr>
        <Hds::Table::Th>Artist</Hds::Table::Th>
        <Hds::Table::Th>Album</Hds::Table::Th>
        <Hds::Table::Th>Release Year</Hds::Table::Th>
      </Hds::Table::Tr>
    </:head>
    <:body as |data|>
      <Hds::Table::Tr>
        <td>{{data.artist}}</td>
        <td>{{data.album}}</td>
        <td>{{data.year}}</td>
      </Hds::Table::Tr>
    </:body>
  </Hds::Table>
  <h4 class="dummy-h4">
    Sortable table (all columns sortable)
  </h4>
  <Hds::Table @model={{this.model.data}} @columns={{this.model.columns}}>
    <:body as |data|>
      <Hds::Table::Tr>
        <td>{{data.artist}}</td>
        <td>{{data.album}}</td>
        <td>{{data.year}}</td>
      </Hds::Table::Tr>
    </:body>
  </Hds::Table>
  <h4 class="dummy-h4">
    Sortable table (only some columns sortable)
  </h4>
  <Hds::Table @model={{this.model.data}} @columns={{this.model.columns}} @sortingKeys={{array "artist" "album"}}>
    <:body as |data|>
      <Hds::Table::Tr>
        <td>{{data.artist}}</td>
        <td>{{data.album}}</td>
        <td>{{data.year}}</td>
      </Hds::Table::Tr>
    </:body>
  </Hds::Table>
  <h4 class="dummy-h4">
    Sortable table, some columns sortable, artist column pre-sorted.
  </h4>
  <Hds::Table
    @model={{this.model.data}}
    @columns={{this.model.columns}}
    @sortingKeys={{array "artist" "album"}}
    @sortBy="artist"
  >
    <:body as |data|>
      <Hds::Table::Tr>
        <td>{{data.artist}}</td>
        <td>{{data.album}}</td>
        <td>{{data.year}}</td>
      </Hds::Table::Tr>
    </:body>
  </Hds::Table>
  <h4 class="dummy-h4">
    Sortable table, some columns sortable, artist column pre-sorted in descending order.
  </h4>
  <Hds::Table
    @model={{this.model.data}}
    @columns={{this.model.columns}}
    @sortingKeys={{array "artist" "album"}}
    @sortBy="artist"
    @sortOrder="desc"
  >
    <:body as |data|>
      <Hds::Table::Tr>
        <td>{{data.artist}}</td>
        <td>{{data.album}}</td>
        <td>{{data.year}}</td>
      </Hds::Table::Tr>
    </:body>
  </Hds::Table>
</section>