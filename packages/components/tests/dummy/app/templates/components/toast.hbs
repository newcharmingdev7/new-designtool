{{page-title "Toast component"}}

<h2 class="dummy-h2">Toast</h2>

<section>
  <h3 class="dummy-h3" id="overview"><a href="#overview" class="dummy-link-section">Â§</a> Overview</h3>

  <p class="dummy-paragraph">
    A Toast is an element intended for
    <strong>messages that are the result of a user's actions</strong>
    (for system-generated messages see the
    <LinkTo @route="components.alert">Alert</LinkTo>
    component.).
  </p>

  <p class="dummy-paragraph">Typically it displays a brief, temporary notification and it disappears on its own (after a
    time interval) or as a result of a user interacting with it.
  </p>

  <p class="dummy-paragraph">
    It can have an
    <strong>icon</strong>
    (optional), a
    <strong>title</strong>
    and/or
    <strong>description</strong>
    (required to have at least one of the two), some
    <strong>actions</strong>
    (optional) and a
    <strong>close</strong>
    button.</p>
  <p class="dummy-paragraph">
    ðŸš¨
    <em><strong>Important</strong>: we provide only the visual styling to this element, so other features like
      placement, animations/transitions, and what happens on dismiss, will need to be implemented in your app (eg. with
      an Ember addon).
    </em>
  </p>
</section>

<section>
  <h3 class="dummy-h3" id="component-api"><a href="#component-api" class="dummy-link-section">Â§</a> Component API</h3>
  <div class="dummy-banner dummy-banner--info">
    <p class="dummy-paragraph"><strong>Notice</strong>: the
      <code class="dummy-code">Hds::Toast</code>
      component is built out of the
      <code class="dummy-code">Hds::Alert(Inline)</code>
      component, so it shares the same API. Please refer to
      <LinkTo @route="components.alert">the Alert Component API documentation</LinkTo>
      to know more.</p>
  </div>

</section>

<section>
  <h3 class="dummy-h3" id="how-to-use"><a href="#how-to-use" class="dummy-link-section">Â§</a> How to use</h3>

  <h4 class="dummy-h4">Basic use</h4>
  <p class="dummy-paragraph">
    The most basic invocation requires the
    <code class="dummy-code">type</code>,
    <code class="dummy-code">title</code>
    and/or
    <code class="dummy-code">text</code>
    arguments to be passed, and an
    <code class="dummy-code">onClose</code>
    callback function. By default a
    <code class="dummy-code">neutral</code>
    toast is generated (with a neutral color applied and a specific icon visible).
  </p>
  {{! prettier-ignore-start }}
  {{! template-lint-disable no-unbalanced-curlies }}
  <CodeBlock
    @language="markup"
    @code='
      <Hds::Toast @title="Title here" @description="Description here" @onClose=\{{ your function here }} />
    '
  />
  {{! template-lint-enable no-unbalanced-curlies }}
  {{! prettier-ignore-end }}
  <p class="dummy-paragraph">Renders to:</p>
  <Hds::Toast @title="Title here" @description="Description here" @onClose={{this.noop}} />
  <p class="dummy-paragraph">
    ðŸš¨
    <em><strong>Important</strong>: the actual implementation of what happens to the alert when the
      <code class="dummy-code">onClose</code>
      function is invoked is left to the developer.</em>
  </p>

  <p class="dummy-paragraph">
    If needed, you can pass only
    <code class="dummy-code">title</code>
    or only
    <code class="dummy-code">text</code>
    as argument.
  </p>
  {{! prettier-ignore-start }}
  {{! template-lint-disable no-unbalanced-curlies }}
  <CodeBlock
    @language="markup"
    @code='
      <Hds::Toast @title="Title here" @onClose=\{{...}} />
    '
  />
  <CodeBlock
    @language="markup"
    @code='
      <Hds::Toast @description="Description here" @onClose=\{{...}} />
    '
  />
  {{! template-lint-enable no-unbalanced-curlies }}
  {{! prettier-ignore-end }}
  <p class="dummy-paragraph">Renders to:</p>
  <Hds::Toast @title="Title here" @onClose={{this.noop}} />
  <br />
  <Hds::Toast @description="Description here" @onClose={{this.noop}} />

  <h4 class="dummy-h4">Color</h4>
  <p class="dummy-paragraph">
    A different color can be applied to the toast using the
    <code class="dummy-code">color</code>
    argument. This will also determine the icon default used in the toast (unless overwritten, see below).
  </p>
  {{! prettier-ignore-start }}
  {{! template-lint-disable no-unbalanced-curlies }}
  <CodeBlock
    @language="markup"
    @code='
      <Hds::Toast @color="success" @title="Title here" @description="Description here" @onClose=\{{...}} />
    '
  />
  {{! template-lint-enable no-unbalanced-curlies }}
  {{! prettier-ignore-end }}
  <p class="dummy-paragraph">Renders to:</p>
  <Hds::Toast @color="success" @title="Title here" @description="Description here" @onClose={{this.noop}} />

  <h4 class="dummy-h4">Icon</h4>
  <p class="dummy-paragraph">
    A different icon can be used in the toast using the
    <code class="dummy-code">icon</code>
    argument.
  </p>
  {{! prettier-ignore-start }}
  {{! template-lint-disable no-unbalanced-curlies }}
  <CodeBlock
    @language="markup"
    @code='
      <Hds::Toast @color="success" @icon="bulb" @title="Title here" @description="Description here" @onClose=\{{...}} />
    '
  />
  {{! template-lint-enable no-unbalanced-curlies }}
  {{! prettier-ignore-end }}
  <p class="dummy-paragraph">Renders to:</p>
  <Hds::Toast
    @color="success"
    @icon="bulb"
    @title="Title here"
    @description="Description here"
    @onClose={{this.noop}}
  />
  <p class="dummy-paragraph">
    If instead you want to completely hide the icon you have to pass a
    <code class="dummy-code">false</code>
    value to the
    <code class="dummy-code">icon</code>
    argument.
  </p>
  {{! prettier-ignore-start }}
  {{! template-lint-disable no-unbalanced-curlies }}
  <CodeBlock
    @language="markup"
    @code='
      <Hds::Toast @color="success" @icon=\{{false}} @title="Title here" @description="Description here" @onClose=\{{...}} />
    '
  />
  {{! template-lint-enable no-unbalanced-curlies }}
  {{! prettier-ignore-end }}
  <p class="dummy-paragraph">Renders to:</p>
  <Hds::Toast
    @color="success"
    @icon={{false}}
    @title="Title here"
    @description="Description here"
    @onClose={{this.noop}}
  />

  <h4 class="dummy-h4">Actions</h4>
  <p class="dummy-paragraph">Actions can optionally be passed into the
    <code class="dummy-code">&lt;:actions&gt;</code>
    named block using one of the suggested
    <code class="dummy-code">Button</code>,
    <code class="dummy-code">Link::Standalone</code>
    or
    <code class="dummy-code">LinkTo::Standalone</code>
    yielded components.</p>
  {{! prettier-ignore-start }}
  {{! template-lint-disable no-unbalanced-curlies }}
  <CodeBlock
    @language="markup"
    @code='
      <Hds::Toast @color="critical" @title="Title here" @description="Description here" @onClose=\{{...}}>
        <:actions as |A|>
          <A.Button @text="Your action" @color="secondary" @onClick=\{{ your function here }} />
          <A.LinkTo::Standalone @color="secondary" @icon="plus" @text="Another action" @route="..." @color="secondary" />
        </:actions>
      </Hds::Toast>
    '
  />
  {{! template-lint-enable no-unbalanced-curlies }}
  {{! prettier-ignore-end }}
  <p class="dummy-paragraph">Renders to:</p>
  <Hds::Toast @color="critical" @title="Title here" @description="Description here" @onClose={{this.noop}}>
    <:actions as |A|>
      <A.Button @text="Your action" @color="secondary" />
      <A.LinkTo::Standalone @color="secondary" @icon="plus" @text="Another action" @route="index" />
    </:actions>
  </Hds::Toast>

  <h4 class="dummy-h4">Generic content</h4>
  <p class="dummy-paragraph">It's also possible to insert custom content in the
    <code class="dummy-code">&lt;:generic&gt;</code>
    named block.
  </p>
  <p class="dummy-paragraph"><em>Notice: the content will appear at the bottom, after title, description and actions,
      and the developer will need to take care of spacing, layout and styling of the custom content in this case.</em>
  </p>
  {{! prettier-ignore-start }}
  {{! template-lint-disable no-unbalanced-curlies }}
  <CodeBlock
    @language="markup"
    @code='
      <Hds::Toast @title="Title here" @description="Description here" @onClose=\{{...}}>
        <:generic>
          [your content here]
        </:generic>
      </Hds::Toast>
    '
  />
  {{! template-lint-enable no-unbalanced-curlies }}
  {{! prettier-ignore-end }}
  <p class="dummy-paragraph">Renders to:</p>
  <Hds::Toast @title="Title here" @description="Description here" @onClose={{this.noop}}>
    <:generic>
      [your content here]
    </:generic>
  </Hds::Toast>
  <p class="dummy-paragraph">ðŸš¨
    <em><strong>Important</strong>: this method should be used only in special cases and as an escape hatch. If you find
      yourself in need to use it, we suggest to speak with the design system team to check that the solution is
      conformant and satifies the accessibility criteria.
    </em></p>
</section>

<section>
  <h3 class="dummy-h3" id="design-guidelines"><a href="#design-guidelines" class="dummy-link-section">Â§</a>
    Design guidelines</h3>
  <div class="dummy-design-guidelines">
    <p class="dummy-paragraph"><a
        href="https://www.figma.com/file/noyY6dUMDYjmySpHcMjhkN/HDS-Product---Components?node-id=6484%3A17367"
        target="_blank"
        rel="noopener noreferrer"
      >Figma UI Kit</a></p>
    <br />
    <img class="dummy-figma-docs" src="/assets/images/toast-design-usage.png" alt="" role="none" />
  </div>
</section>

<section data-test-percy>
  <h3 class="dummy-h3" id="showcase"><a href="#showcase" class="dummy-link-section">Â§</a> Showcase</h3>

  <h4 class="dummy-h4">Color</h4>
  <div class="dummy-toast-base-sample">
    {{#each @model.COLORS as |color|}}
      <Hds::Toast
        @color={{color}}
        @title={{capitalize color}}
        @description="This is the toast with <em>{{color}}</em> color."
        @onClose={{this.noop}}
      />
    {{/each}}
  </div>

  <h4 class="dummy-h4">Icon</h4>
  <div class="dummy-toast-base-sample">
    <Hds::Toast
      @color="highlight"
      @title="Default icon"
      @description="Lorem ipsum dolor sit amet."
      @onClose={{this.noop}}
    />
    <Hds::Toast
      @color="highlight"
      @icon="meh"
      @title="With icon override"
      @description="Lorem ipsum dolor sit amet."
      @onClose={{this.noop}}
    />
    <Hds::Toast
      @color="highlight"
      @icon="running"
      @title="With animated icon"
      @description="Lorem ipsum dolor sit amet."
      @onClose={{this.noop}}
    />
    <Hds::Toast
      @color="highlight"
      @icon=""
      @title="Without icon"
      @description="Lorem ipsum dolor sit amet."
      @onClose={{this.noop}}
    />
  </div>

  <h4 class="dummy-h4">Content</h4>
  <div class="dummy-toast-sample-grid dummy-toast-sample-grid--wide-content">
    <Hds::Toast
      @color="success"
      @title="A simple title"
      @description="A simple description text"
      @onClose={{this.noop}}
    />
    <Hds::Toast
      @color="success"
      @title="A toast with a very long title and a long description text that should go on multiple lines"
      @description="Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque erat elit, lacinia at magna eget, porttitor lobortis nulla."
      @onClose={{this.noop}}
    />
    <Hds::Toast @color="success" @title="A toast with a title and no description text." @onClose={{this.noop}} />
    <Hds::Toast
      @color="success"
      @description="A toast with no title and just a description text"
      @onClose={{this.noop}}
    />
    <Hds::Toast
      @color="success"
      @title="A toast with rich text description (HTML)"
      @description="The description text can support HTML tags embedded in the string value, like <strong>strong</strong> and <em>em</em> as well as <code>code</code> and <a href='#'>links</a>."
      @onClose={{this.noop}}
    />
    <Hds::Toast
      @color="success"
      @title="A toast with extra/custom content"
      @description="In special cases, you can pass extra content to the toast using the <code>generic</code> named block."
      @onClose={{this.noop}}
    >
      <:generic>
        <DummyPlaceholder @text="some generic content" @height="50" @background="#eee" />
      </:generic>
    </Hds::Toast>
  </div>

  <h4 class="dummy-h4">Actions</h4>
  <div class="dummy-toast-sample-grid dummy-toast-sample-grid--wide-content">
    <Hds::Toast
      @color="warning"
      @title="Action passed as yielded component"
      @description="Lorem ipsum dolor sit amet, consectetur adipiscing elit."
      @onClose={{this.noop}}
    >
      <:actions as |A|>
        <A.Button @text="Action" @color="secondary" />
      </:actions>
    </Hds::Toast>
    <Hds::Toast
      @color="warning"
      @title="With multiple actions passed as yielded components"
      @description="Lorem ipsum dolor sit amet, consectetur adipiscing elit."
      @onClose={{this.noop}}
    >
      <:actions as |A|>
        <A.Button @text="Secondary" @color="secondary" />
        <A.Button @icon="plus" @text="Tertiary" @color="tertiary" />
        <A.Link::Standalone @icon="plus" @text="Standalone" href="#" @color="secondary" />
      </:actions>
    </Hds::Toast>
  </div>
</section>

<section>
  <h3 class="dummy-h3" id="accessibility"><a href="#accessibility" class="dummy-link-section">Â§</a> Accessibility</h3>
  <p class="dummy-paragraph">Dynamically-rendered Toast are automatically announced by most screen readers. On some
    operating systems, Toast may trigger a sound.
  </p>

  <p class="dummy-paragraph">ðŸš§ TODO: Have Melanie review post-Amy transfer</p>
  <p class="dummy-paragraph">ðŸš§ TODO: Bring role change to code, if folks agree</p>
  <ul>
    <li class="dummy-paragraph">
      If
      <code class="dummy-code">color="warning"</code>
      or
      <code class="dummy-code">color="critical"</code>
      => then
      <code class="dummy-code">role="alert"</code>, as it's an important message.
    </li>
    <ul>
      <li class="dummy-paragraph">Reference:
        <a href="https://www.w3.org/TR/wai-aria-practices-1.2/#alert" target="_blank" rel="noopener noreferrer">
          WAI-ARIA Authoring Practices 1.2 (Alert)
        </a>
      </li>
    </ul>
    <li class="dummy-paragraph">
      If
      <code class="dummy-code">color="neutral"</code>,
      <code class="dummy-code">color="highlight"</code>
      or
      <code class="dummy-code">color="success"</code>
      => then
      <code class="dummy-code">role="status"</code>, as the content is advisory information for the user, but is not
      important enough to justify a
      <code class="dummy-code">role="alert"</code>. Elements with
      <code class="dummy-code">role="status"</code>
      have an implicit
      <code class="dummy-code">aria-live="polite"</code>
      and
      <code class="dummy-code">aria-atomic="true"</code>, so we have included them explicitly, for clarity.
    </li>
    <ul>
      <li class="dummy-paragraph">
        Reference:
        <a href="https://www.w3.org/TR/wai-aria-1.2/#status" target="_blank" rel="noopener noreferrer">
          WAI-ARIA 1.2 (Status)
        </a>
      </li>
      <li class="dummy-paragraph">
        Reference:
        <a href="https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA22" target="_blank" rel="noopener noreferrer">
          WAI-ARIA Techniques 1.2 (Using role=status to present status messages)
        </a>
      </li>
    </ul>
    <li class="dummy-paragraph">
      Dismiss is a button, with
      <code class="dummy-code">type="button"</code>. Dismiss has a focus state (e.g. the user can tab to the button).
      When the dismiss button is focused, the toast closes on pressing the return key (enter on Windows). Note: You will
      need to implement an
      <code class="dummy-code">onClose</code>
      function in your app.
    </li>
    <li class="dummy-paragraph">
      We do not have a
      <code class="dummy-code">role="alertdialog"</code>
      yet, as this type of alert interrupts the user's workflow to communicate an important message and acquire a
      response.
    </li>
    <ul>
      <li class="dummy-paragraph">
        Reference:
        <a href="https://www.w3.org/TR/wai-aria-practices-1.2/#alertdialog" target="_blank" rel="noopener noreferrer">
          WAI-ARIA Techniques 1.2, Alert and Message Dialogs
        </a>
      </li>
    </ul>
  </ul>
  <p class="dummy-paragraph">Applicable WCAG success criteria</p>
  <ul>
    <li class="dummy-paragraph">
      <a
        href="https://www.w3.org/WAI/WCAG21/Understanding/info-and-relationships.html"
        target="_blank"
        rel="noopener noreferrer"
      >
        1.3.1: Info and Relationships
      </a>
    </li>
    <li class="dummy-paragraph">
      <a
        href="https://www.w3.org/WAI/WCAG21/Understanding/meaningful-sequence.html"
        target="_blank"
        rel="noopener noreferrer"
      >
        1.3.2: Meaningful Sequence
      </a>
    </li>
    <li class="dummy-paragraph">
      <a href="https://www.w3.org/WAI/WCAG21/Understanding/use-of-color.html" target="_blank" rel="noopener noreferrer">
        1.4.1: Use of Color
      </a>
    </li>
    <li class="dummy-paragraph">
      <a
        href="https://www.w3.org/WAI/WCAG21/Understanding/contrast-minimum.html"
        target="_blank"
        rel="noopener noreferrer"
      >
        1.4.3: Contrast (Minimum)
      </a>
    </li>
    <li class="dummy-paragraph">
      <a href="https://www.w3.org/WAI/WCAG21/Understanding/reflow.html" target="_blank" rel="noopener noreferrer">
        1.4.10: Reflow
      </a>
    </li>
    <li class="dummy-paragraph">
      <a
        href="https://www.w3.org/WAI/WCAG21/Understanding/non-text-contrast.html"
        target="_blank"
        rel="noopener noreferrer"
      >
        1.4.11: Non-text Contrast
      </a>
    </li>
    <li class="dummy-paragraph">
      <a href="https://www.w3.org/WAI/WCAG21/Understanding/text-spacing.html" target="_blank" rel="noopener noreferrer">
        1.4.12: Text Spacing
      </a>
    </li>
    <li class="dummy-paragraph">
      <a href="https://www.w3.org/WAI/WCAG21/Understanding/keyboard.html" target="_blank" rel="noopener noreferrer">
        2.1.1: Keyboard
      </a>
      (For Alerts with focusable elements, such as those with
      <code class="dummy-code">onDismiss</code>
      or
      <code class="dummy-code">:actions</code>.)
    </li>
    <li class="dummy-paragraph">
      <a
        href="https://www.w3.org/WAI/WCAG21/Understanding/no-keyboard-trap.html"
        target="_blank"
        rel="noopener noreferrer"
      >
        2.1.2: No Keyboard Trap
      </a>
    </li>
    <li class="dummy-paragraph">
      <a
        href="https://www.w3.org/WAI/WCAG21/Understanding/timing-adjustable.html"
        target="_blank"
        rel="noopener noreferrer"
      >
        2.2.1: Timing Adjustable
      </a>
    </li>
    <ul>
      <li class="dummy-paragraph">For
        <strong>Alert (Toast)</strong>, which will automatically dismiss. Note: The automatic dismiss functionality will
        come from the consuming app, not the Design System.
      </li>
    </ul>
    <li class="dummy-paragraph">
      <a
        href="https://www.w3.org/WAI/WCAG21/Understanding/label-in-name.html"
        target="_blank"
        rel="noopener noreferrer"
      >
        2.5.3: Label in Name
      </a>
    </li>
    <li class="dummy-paragraph">
      <a href="https://www.w3.org/WAI/WCAG21/Understanding/parsing.html" target="_blank" rel="noopener noreferrer">
        4.1.1: Parsing
      </a>
    </li>
    <li class="dummy-paragraph">
      <a
        href="https://www.w3.org/WAI/WCAG21/Understanding/name-role-value.html"
        target="_blank"
        rel="noopener noreferrer"
      >
        4.1.2: Name, Role, Value
      </a>
    </li>
    <li class="dummy-paragraph">
      <a
        href="https://www.w3.org/WAI/WCAG21/Understanding/status-messages.html"
        target="_blank"
        rel="noopener noreferrer"
      >
        4.1.3: Status Messages
      </a>
    </li>
  </ul>
</section>