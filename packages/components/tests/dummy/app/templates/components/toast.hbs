{{page-title "Toast component"}}

<h2 class="dummy-h2">Toast</h2>

<section>
  <h3 class="dummy-h3" id="overview"><a href="#overview" class="dummy-link-section">Â§</a> Overview</h3>

  <p class="dummy-paragraph">
    A Toast is an element intended for
    <strong>messages that are the result of a user's actions</strong>
    (for system-generated messages see the
    <LinkTo @route="components.alert">Alert</LinkTo>
    component.).
  </p>

  <p class="dummy-paragraph">Typically it displays a brief, temporary notification and it disappears on its own (after a
    time interval) or as a result of a user interacting with it.
  </p>

  <p class="dummy-paragraph">
    It can have an
    <strong>icon</strong>
    (optional), a
    <strong>title</strong>
    and/or
    <strong>description</strong>
    (required to have at least one of the two), some
    <strong>actions</strong>
    (optional) and a
    <strong>dismiss/close</strong>
    button.</p>
  <p class="dummy-paragraph">
    ðŸš¨
    <em><strong>Important</strong>: we provide only the visual styling to this element, so other features like
      placement, animations/transitions, and what happens on dismiss, will need to be implemented in your app (eg. with
      an Ember addon).
    </em>
  </p>
</section>

<section>
  <h3 class="dummy-h3" id="component-api"><a href="#component-api" class="dummy-link-section">Â§</a> Component API</h3>
  <div class="dummy-banner dummy-banner--info">
    <p class="dummy-paragraph"><strong>Notice</strong>: the
      <code class="dummy-code">Hds::Toast</code>
      component is built out of the
      <code class="dummy-code">Hds::Alert(Inline)</code>
      component, so it shares the same API. Please refer to
      <LinkTo @route="components.alert">the Alert Component API documentation</LinkTo>
      to know more.</p>
  </div>

</section>

<section>
  <h3 class="dummy-h3" id="how-to-use"><a href="#how-to-use" class="dummy-link-section">Â§</a> How to use</h3>

  <h4 class="dummy-h4">Basic use</h4>
  <p class="dummy-paragraph">
    The most basic invocation requires the
    <code class="dummy-code">type</code>,
    <code class="dummy-code">title</code>
    and/or
    <code class="dummy-code">text</code>
    arguments to be passed, and an
    <code class="dummy-code">onDismiss</code>
    callback function. By default a
    <code class="dummy-code">neutral</code>
    toast is generated (with a neutral color applied and a specific icon visible).
  </p>
  {{! prettier-ignore-start }}
  {{! template-lint-disable no-unbalanced-curlies }}
  <CodeBlock
    @language="markup"
    @code='
      <Hds::Toast @title="Title here" @description="Description here" @onDismiss=\{{ your function here }} />
    '
  />
  {{! template-lint-enable no-unbalanced-curlies }}
  {{! prettier-ignore-end }}
  <p class="dummy-paragraph">Renders to:</p>
  <Hds::Toast @title="Title here" @description="Description here" @onDismiss={{this.noop}} />
  <p class="dummy-paragraph">
    ðŸš¨
    <em><strong>Important</strong>: the actual implementation of what happens to the alert when the
      <code class="dummy-code">onDismiss</code>
      function is invoked is left to the developer.</em>
  </p>

  <p class="dummy-paragraph">
    If needed, you can pass only
    <code class="dummy-code">title</code>
    or only
    <code class="dummy-code">text</code>
    as argument.
  </p>
  {{! prettier-ignore-start }}
  {{! template-lint-disable no-unbalanced-curlies }}
  <CodeBlock
    @language="markup"
    @code='
      <Hds::Toast @title="Title here" @onDismiss=\{{...}} />
    '
  />
  <CodeBlock
    @language="markup"
    @code='
      <Hds::Toast @description="Description here" @onDismiss=\{{...}} />
    '
  />
  {{! template-lint-enable no-unbalanced-curlies }}
  {{! prettier-ignore-end }}
  <p class="dummy-paragraph">Renders to:</p>
  <Hds::Toast @title="Title here" @onDismiss={{this.noop}} />
  <br />
  <Hds::Toast @description="Description here" @onDismiss={{this.noop}} />

  <h4 class="dummy-h4">Color</h4>
  <p class="dummy-paragraph">
    A different color can be applied to the toast using the
    <code class="dummy-code">color</code>
    argument. This will also determine the icon default used in the toast (unless overwritten, see below).
  </p>
  {{! prettier-ignore-start }}
  {{! template-lint-disable no-unbalanced-curlies }}
  <CodeBlock
    @language="markup"
    @code='
      <Hds::Toast @color="success" @title="Title here" @description="Description here" @onDismiss=\{{...}} />
    '
  />
  {{! template-lint-enable no-unbalanced-curlies }}
  {{! prettier-ignore-end }}
  <p class="dummy-paragraph">Renders to:</p>
  <Hds::Toast @color="success" @title="Title here" @description="Description here" @onDismiss={{this.noop}} />

  <h4 class="dummy-h4">Icon</h4>
  <p class="dummy-paragraph">
    A different icon can be used in the toast using the
    <code class="dummy-code">icon</code>
    argument.
  </p>
  {{! prettier-ignore-start }}
  {{! template-lint-disable no-unbalanced-curlies }}
  <CodeBlock
    @language="markup"
    @code='
      <Hds::Toast @color="success" @icon="bulb" @title="Title here" @description="Description here" @onDismiss=\{{...}} />
    '
  />
  {{! template-lint-enable no-unbalanced-curlies }}
  {{! prettier-ignore-end }}
  <p class="dummy-paragraph">Renders to:</p>
  <Hds::Toast
    @color="success"
    @icon="bulb"
    @title="Title here"
    @description="Description here"
    @onDismiss={{this.noop}}
  />
  <p class="dummy-paragraph">
    If instead you want to completely hide the icon you have to pass a
    <code class="dummy-code">false</code>
    value to the
    <code class="dummy-code">icon</code>
    argument.
  </p>
  {{! prettier-ignore-start }}
  {{! template-lint-disable no-unbalanced-curlies }}
  <CodeBlock
    @language="markup"
    @code='
      <Hds::Toast @color="success" @icon=\{{false}} @title="Title here" @description="Description here" @onDismiss=\{{...}} />
    '
  />
  {{! template-lint-enable no-unbalanced-curlies }}
  {{! prettier-ignore-end }}
  <p class="dummy-paragraph">Renders to:</p>
  <Hds::Toast
    @color="success"
    @icon={{false}}
    @title="Title here"
    @description="Description here"
    @onDismiss={{this.noop}}
  />

  <h4 class="dummy-h4" id="how-to-use-description">Description with structured content</h4>
  <p class="dummy-paragraph">If the "description" block needs to contain logic, rich HTML or structured content it's
    necessary to use the
    <code class="dummy-code">Description</code>
    contextual component.
  </p>
  {{! prettier-ignore-start }}
  {{! template-lint-disable no-unbalanced-curlies }}
  <CodeBlock
    @language="markup"
    @code='
      <Hds::Toast @color="success" @title="Title here" onDismiss=\{{...}} as |A|>
        <A.Description>
          The description can contain
          \{{#if true}}conditional logic\{{/if}}, Ember components, and HTML tags, like
          <strong>strong text</strong>,
          <em>emphasized text</em>,
          <code>code</code>,
          <pre>pre</pre>,
          <a href="#">inline</a>
          <LinkTo @route="index">links</LinkTo>.
        </A.Description>
      </Hds::Toast>
    '
  />
  {{! template-lint-enable no-unbalanced-curlies }}
  {{! prettier-ignore-end }}
  <p class="dummy-paragraph">Renders to:</p>
  <Hds::Toast @color="success" @title="Title here" onDismiss={{this.noop}} as |A|>
    <A.Description>
      The description can contain
      {{#if true}}conditional logic{{/if}}, Ember components, and HTML tags, like
      <strong>strong text</strong>,
      <em>emphasized text</em>,
      <code>code</code>,
      <pre>pre</pre>,
      <a href="#">inline</a>
      <LinkTo @route="index">links</LinkTo>.
    </A.Description>
  </Hds::Toast>
  <p class="dummy-paragraph"><em>Notice: for a few simple HTML elements (like
      <code class="dummy-code">strong</code>,
      <code class="dummy-code">em</code>,
      <code class="dummy-code">a</code>,
      <code class="dummy-code">code/pre</code>) we apply styling. If you use other elements you will need to take care
      of styling them accordingly.</em>
  </p>
  <p class="dummy-paragraph">You can pass more than one
    <code class="dummy-code">D.Description</code>
    contextual components to have multiple description lines.
  </p>
  {{! prettier-ignore-start }}
  {{! template-lint-disable no-unbalanced-curlies }}
  <CodeBlock
    @language="markup"
    @code='
      <Hds::Toast @color="success" @title="Title here" onDismiss=\{{...}} as |A|>
        <A.Description>First line of description.</A.Description>
        <A.Description>Second line of description.</A.Description>
      </Hds::Toast>
    '
  />
  {{! template-lint-enable no-unbalanced-curlies }}
  {{! prettier-ignore-end }}
  <p class="dummy-paragraph">Renders to:</p>
  <Hds::Toast @color="success" @title="Title here" onDismiss={{this.noop}} as |A|>
    <A.Description>First line of description.</A.Description>
    <A.Description>Second line of description.</A.Description>
  </Hds::Toast>

  <h4 class="dummy-h4">Actions</h4>
  <p class="dummy-paragraph">Actions can optionally be passed into the component using one of the suggested
    <code class="dummy-code">Button</code>,
    <code class="dummy-code">Link::Standalone</code>
    or
    <code class="dummy-code">LinkTo::Standalone</code>
    yielded components.</p>
  {{! prettier-ignore-start }}
  {{! template-lint-disable no-unbalanced-curlies }}
  <CodeBlock
    @language="markup"
    @code='
      <Hds::Toast @color="critical" @title="Title here" @description="Description here" @onDismiss=\{{...}} as |A|>
        <A.Button @text="Your action" @color="secondary" @onClick=\{{ your function here }} />
        <A.LinkTo::Standalone @color="secondary" @icon="plus" @text="Another action" @route="..." @color="secondary" />
      </Hds::Toast>
    '
  />
  {{! template-lint-enable no-unbalanced-curlies }}
  {{! prettier-ignore-end }}
  <p class="dummy-paragraph">Renders to:</p>
  <Hds::Toast @color="critical" @title="Title here" @description="Description here" @onDismiss={{this.noop}} as |A|>
    <A.Button @text="Your action" @color="secondary" />
    <A.LinkTo::Standalone @color="secondary" @icon="plus" @text="Another action" @route="index" />
  </Hds::Toast>

  <h4 class="dummy-h4">Generic content</h4>
  <p class="dummy-paragraph">It's also possible to insert custom content in the
    <code class="dummy-code">Generic</code>
    contextual component.
  </p>
  <p class="dummy-paragraph"><em>Notice: the content will appear at the bottom, after title, description and actions,
      and the developer will need to take care of spacing, layout and styling of the custom content in this case.</em>
  </p>
  {{! prettier-ignore-start }}
  {{! template-lint-disable no-unbalanced-curlies }}
  <CodeBlock
    @language="markup"
    @code='
      <Hds::Toast @title="Title here" @description="Description here" @onDismiss=\{{...}} as |A|>
        <A.Generic>
          [your content here]
        </A.generic>
      </Hds::Toast>
    '
  />
  {{! template-lint-enable no-unbalanced-curlies }}
  {{! prettier-ignore-end }}
  <p class="dummy-paragraph">Renders to:</p>
  <Hds::Toast @title="Title here" @description="Description here" @onDismiss={{this.noop}} as |A|>
    <A.Generic>
      [your content here]
    </A.Generic>
  </Hds::Toast>
  <p class="dummy-paragraph">ðŸš¨
    <em><strong>Important</strong>: this method should be used only in special cases and as an escape hatch. If you find
      yourself in need to use it, we suggest to speak with the design system team to check that the solution is
      conformant and satifies the accessibility criteria.
    </em></p>
</section>

<section>
  <h3 class="dummy-h3" id="design-guidelines"><a href="#design-guidelines" class="dummy-link-section">Â§</a>
    Design guidelines</h3>
  <div class="dummy-design-guidelines">
    <p class="dummy-paragraph"><a
        href="https://www.figma.com/file/noyY6dUMDYjmySpHcMjhkN/HDS-Product---Components?node-id=6484%3A17367"
        target="_blank"
        rel="noopener noreferrer"
      >Figma UI Kit</a></p>
    <br />
    <img class="dummy-figma-docs" src="/assets/images/toast-design-usage.png" alt="" role="none" />
  </div>
</section>

<section>
  <h3 class="dummy-h3" id="accessibility"><a href="#accessibility" class="dummy-link-section">Â§</a> Accessibility</h3>
  <p class="dummy-paragraph">This component has been designed and implemented with accessibility in mind. When used as
    designed, there should not be any accessibility issues with this component.
  </p>
  <h4 class="dummy-h4">
    Applicable WCAG Success Criteria (Reference)
  </h4>
  <p class="dummy-paragraph">
    This section is for reference only. This component intends to conform to the following WCAG success criteria:
  </p>
  <ul class="dummy-list">
    <li>1.3.1:
      <a
        href="https://www.w3.org/WAI/WCAG21/Understanding/info-and-relationships.html"
        rel="noopener noreferrer"
        target="_blank"
      >Info and Relationships</a></li>
    <li>1.3.2:
      <a
        href="https://www.w3.org/WAI/WCAG21/Understanding/meaningful-sequence.html"
        rel="noopener noreferrer"
        target="_blank"
      >Meaningful Sequence</a></li>
    <li>1.4.1:
      <a
        href="https://www.w3.org/WAI/WCAG21/Understanding/use-of-color.html"
        rel="noopener noreferrer"
        target="_blank"
      >Use of Color</a></li>
    <li>1.4.3:
      <a
        href="https://www.w3.org/WAI/WCAG21/Understanding/contrast-minimum.html"
        rel="noopener noreferrer"
        target="_blank"
      >Contrast (Minimum)</a></li>
    <li>1.4.10:
      <a
        href="https://www.w3.org/WAI/WCAG21/Understanding/reflow.html"
        rel="noopener noreferrer"
        target="_blank"
      >Reflow</a></li>
    <li>1.4.11
      <a
        href="https://www.w3.org/WAI/WCAG21/Understanding/non-text-contrast.html"
        rel="noopener noreferrer"
        target="_blank"
      >Non-text Contrast</a></li>
    <li>1.4.12:
      <a
        href="https://www.w3.org/WAI/WCAG21/Understanding/text-spacing.html"
        rel="noopener noreferrer"
        target="_blank"
      >Text Spacing</a></li>
    <li>2.1.1:
      <a
        href="https://www.w3.org/WAI/WCAG21/Understanding/keyboard.html"
        rel="noopener noreferrer"
        target="_blank"
      >Keyboard</a>
      (if they contain focusable elements)</li>
    <li>2.1.2:
      <a
        href="https://www.w3.org/WAI/WCAG21/Understanding/no-keyboard-trap.html"
        rel="noopener noreferrer"
        target="_blank"
      >No Keyboard Trap</a></li>
    <li>2.2.1:
      <a
        href="https://www.w3.org/WAI/WCAG21/Understanding/timing-adjustable.html"
        rel="noopener noreferrer"
        target="_blank"
      >Timing Adjustable</a>
      (if these are designed to automatically disappear)</li>
    <li>2.5.3:
      <a
        href="https://www.w3.org/WAI/WCAG21/Understanding/label-in-name.html"
        rel="noopener noreferrer"
        target="_blank"
      >Label in Name</a></li>
    <li>4.1.1:
      <a
        href="https://www.w3.org/WAI/WCAG21/Understanding/parsing.html"
        rel="noopener noreferrer"
        target="_blank"
      >Parsing</a></li>
    <li>4.1.2:
      <a
        href="https://www.w3.org/WAI/WCAG21/Understanding/name-role-value.html"
        rel="noopener noreferrer"
        target="_blank"
      >Name, Role, Value</a></li>
    <li>4.1.3:
      <a
        href="https://www.w3.org/WAI/WCAG21/Understanding/status-messages.html"
        rel="noopener noreferrer"
        target="_blank"
      >Status Messages</a></li>
  </ul>
</section>

<section data-test-percy>
  <h3 class="dummy-h3" id="showcase"><a href="#showcase" class="dummy-link-section">Â§</a> Showcase</h3>

  <h4 class="dummy-h4">Color</h4>
  <div class="dummy-toast-base-sample">
    {{#each @model.COLORS as |color|}}
      <Hds::Toast
        @color={{color}}
        @title={{capitalize color}}
        @description="This is the toast with <em>{{color}}</em> color."
        @onDismiss={{this.noop}}
      />
    {{/each}}
  </div>

  <h4 class="dummy-h4">Icon</h4>
  <div class="dummy-toast-base-sample">
    <Hds::Toast
      @color="highlight"
      @title="Default icon"
      @description="Lorem ipsum dolor sit amet."
      @onDismiss={{this.noop}}
    />
    <Hds::Toast
      @color="highlight"
      @icon="meh"
      @title="With icon override"
      @description="Lorem ipsum dolor sit amet."
      @onDismiss={{this.noop}}
    />
    <Hds::Toast
      @color="highlight"
      @icon="running"
      @title="With animated icon"
      @description="Lorem ipsum dolor sit amet."
      @onDismiss={{this.noop}}
    />
    <Hds::Toast
      @color="highlight"
      @icon=""
      @title="Without icon"
      @description="Lorem ipsum dolor sit amet."
      @onDismiss={{this.noop}}
    />
  </div>

  <h4 class="dummy-h4">Content</h4>
  <div class="dummy-toast-sample-grid dummy-toast-sample-grid--wide-content">
    <div class="dummy-toast-sample-grid__column">
      <Hds::Toast
        @color="success"
        @title="A simple title"
        @description="A simple description text"
        @onDismiss={{this.noop}}
      />
      <Hds::Toast @color="success" @title="A toast with a title and no description text." @onDismiss={{this.noop}} />
      <Hds::Toast
        @color="success"
        @description="A toast with no title and just a description text"
        @onDismiss={{this.noop}}
      />
      <Hds::Toast
        @color="success"
        @title="A toast with a very long title and a long description text that should go on multiple lines"
        @description="Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque erat elit, lacinia at magna eget, porttitor lobortis nulla."
        @onDismiss={{this.noop}}
      />
    </div>
    <div class="dummy-toast-sample-grid__column">
      <Hds::Toast @color="success" @title="A toast with a rich description (HTML)" @onDismiss={{this.noop}} as |A|>
        <A.Description>Using the
          <code>A.Description</code>
          contextual component it's possible to have content that contains HTML tags, like
          <strong>strong text</strong>
          and
          <em>emphasized text</em>
          as well as
          <code>code</code>,
          <pre>pre</pre>
          and
          <a href="#">inline links</a>.</A.Description>
      </Hds::Toast>
      <Hds::Toast
        @onDismiss={{this.noop}}
        @color="success"
        @title="Multiple lines of description using more than one 'description' contextual component"
        as |A|
      >
        <A.Description>This is the first line of description, yielded to a
          <code>A.Description</code>
          contextual component.</A.Description>
        <A.Description>And this is the second line of description, yielded to another
          <code>A.Description</code>
          contextual component.</A.Description>
      </Hds::Toast>
      <Hds::Toast
        @color="success"
        @title="A toast with extra/custom content"
        @description="In special cases, you can pass extra content to the toast using the <code>A.Generic</code> contextual component."
        @onDismiss={{this.noop}}
        as |A|
      >
        <A.Generic>
          <DummyPlaceholder @text="some generic content" @height="50" @background="#eee" />
        </A.Generic>
      </Hds::Toast>
    </div>
  </div>

  <h4 class="dummy-h4">Actions</h4>
  <div class="dummy-toast-sample-grid dummy-toast-sample-grid--wide-content">
    <Hds::Toast
      @color="warning"
      @title="Action passed as yielded component"
      @description="Lorem ipsum dolor sit amet, consectetur adipiscing elit."
      @onDismiss={{this.noop}}
      as |A|
    >
      <A.Button @text="Action" @color="secondary" />
    </Hds::Toast>
    <Hds::Toast
      @color="warning"
      @title="With multiple actions passed as yielded components"
      @description="Lorem ipsum dolor sit amet, consectetur adipiscing elit."
      @onDismiss={{this.noop}}
      as |A|
    >
      <A.Button @text="Secondary" @color="secondary" />
      <A.Button @icon="plus" @text="Tertiary" @color="tertiary" />
      <A.Link::Standalone @icon="plus" @text="Standalone" href="#" @color="secondary" />
    </Hds::Toast>
  </div>
</section>